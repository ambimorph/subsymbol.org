<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>subsymbol.org</title><link>http://www.subsymbol.org/</link><description></description><language>en</language><lastBuildDate>Tue, 29 Jul 2014 21:53:06 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Pólya's Urn</title><link>http://www.subsymbol.org/posts/polyas-urn.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Skip to interactive demo: &lt;a class="reference internal" href="http://www.subsymbol.org/posts/polyas-urn.html#try-it"&gt;Try it!&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="balls-in-urns"&gt;
&lt;h2&gt;Balls in Urns&lt;/h2&gt;
&lt;p&gt;If you have studied probability, you are probably familiar with the canonical balls-in-an-urn allegory for understanding discrete probability distributions.
For example, you could imagine an urn containing 1 red ball and 3 green balls.
Drawing a ball from the urn at random represents sampling from a probability distribution where the probability of one outcome is &lt;span class="math"&gt;\(25\%\)&lt;/span&gt;
 and the probability of the other outcome is &lt;span class="math"&gt;\(75\%\)&lt;/span&gt;

We can extend this idea in a variety of ways.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="polya-s-urn"&gt;
&lt;h2&gt;Pólya's Urn&lt;/h2&gt;
&lt;p&gt;In &lt;em&gt;Pólya's Urn&lt;/em&gt;, the extension is that whenever you draw a ball from the urn, you not only replace it, but you add an extra ball of the same colour.
So if you happened to draw a green ball in the example above, then the ratio would change from &lt;span class="math"&gt;\(1:3\)&lt;/span&gt;
 to &lt;span class="math"&gt;\(1:4\)&lt;/span&gt;
.
That means on the next draw, you would now have only a &lt;span class="math"&gt;\(20\%\)&lt;/span&gt;
 chance of drawing red.
On the other hand, if you happened to have drawn red, then the ratio would change to &lt;span class="math"&gt;\(2:3\)&lt;/span&gt;
, giving red a probability of &lt;span class="math"&gt;\(40\%\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;This process is interesting, because it has the property that the more often you observe something, the more likely you are to observe it again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="different-starting-conditions"&gt;
&lt;h2&gt;Different starting conditions&lt;/h2&gt;
&lt;p&gt;The way the distribution changes over time depends on the starting conditions.&lt;/p&gt;
&lt;div class="section" id="one-of-each"&gt;
&lt;h3&gt;One of each&lt;/h3&gt;
&lt;p&gt;Let's imagine the simplest case, in which we start with one each of two colours, red and green.
The following table shows the probabilities of getting red on the first three draws, and how each draw changes the probability of the next by changing the proportion of colours in the urn.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;&lt;colgroup&gt;&lt;col width="33%"&gt;&lt;col width="33%"&gt;&lt;col width="33%"&gt;&lt;/colgroup&gt;&lt;thead valign="bottom"&gt;&lt;tr&gt;&lt;th class="head"&gt; &lt;/th&gt;
&lt;th class="head"&gt;RRR&lt;/th&gt;
&lt;th class="head"&gt; &lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Draw&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;p(Draw)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;new R:G&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2\)&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;2:1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(2/3\)&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;3:1&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(3/4\)&lt;/span&gt;
&lt;/td&gt;
&lt;td&gt;4:1&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;hr class="docutils"&gt;&lt;p&gt;There are more ways to have drawn two of one colour, and one of the other, than 3 of one colour.
However, because of the way drawing a particular colour reinforces itself,
there is a &lt;span class="math"&gt;\(50\%\)&lt;/span&gt;
 chance of drawing the same colour every time over the first three draws.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;&lt;colgroup&gt;&lt;col width="50%"&gt;&lt;col width="50%"&gt;&lt;/colgroup&gt;&lt;thead valign="bottom"&gt;&lt;tr&gt;&lt;th class="head"&gt;First three draws&lt;/th&gt;
&lt;th class="head"&gt;probability&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td&gt;RRR&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 3/4 = 1/4\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RRG&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/4 = 1/12\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RGR&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/2 = 1/6\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;RGG&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/2 = 1/6\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRR&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/2 = 1/6\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GRG&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/2 = 1/6\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GGR&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 1/4 = 1/12\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;GGG&lt;/td&gt;
&lt;td&gt;&lt;span class="math"&gt;\(1/2 \times 2/3 \times 3/4 = 1/4\)&lt;/span&gt;
&lt;/td&gt;
&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;
&lt;div class="section" id="ten-of-each"&gt;
&lt;h3&gt;Ten of each&lt;/h3&gt;
&lt;p&gt;Now suppose that we start with 10 each of red and green balls.
In this case, simply drawing a red ball the first time does not change the probability that it will be drawn again nearly as significantly as with the &lt;span class="math"&gt;\(1:1\)&lt;/span&gt;
 starting conditions.
The probability of drawing 3 of the same colour in a row falls to &lt;span class="math"&gt;\(2 \times 10/20 \times 11/21 \times 12/22 = 2/7 \cong  29\%\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;We can view the starting conditions as a list of numbers, one for each starting colour, and call it &lt;em&gt;alpha&lt;/em&gt; (&lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;
).
So our first example had &lt;span class="math"&gt;\(\alpha = [1, 3]\)&lt;/span&gt;
,
our second example had &lt;span class="math"&gt;\(\alpha = [1, 1]\)&lt;/span&gt;
,
and our third example had &lt;span class="math"&gt;\(\alpha = [10, 10]\)&lt;/span&gt;
,&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="higher-returns"&gt;
&lt;h3&gt;Higher returns&lt;/h3&gt;
&lt;p&gt;On the other hand, imagine if we started with 1 each of red and green, but instead of increasing the number of balls by 1 when we draw a colour, we increased it by 10.
Now every draw has a much stronger effect.
The probability of drawing the same colour 3 times in a row would now be &lt;span class="math"&gt;\(2 \times 1/2 \times 11/12 \times 21/22 = 7/8 \cong 88\%\)&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;We could even have a particular increase number for each colour, and have another list, called &lt;em&gt;beta&lt;/em&gt; (&lt;span class="math"&gt;\(\beta\)&lt;/span&gt;
).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-colours"&gt;
&lt;h3&gt;More colours&lt;/h3&gt;
&lt;p&gt;Another way to change the starting conditions is to increase the number of colours.
If our starting urn had one each of 10 different colours, then, again, when we draw the first ball, it has much less of an effect on the chance of drawing it again.
We can call the number of colours &lt;span class="math"&gt;\(n\)&lt;/span&gt;
.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="try-it"&gt;
&lt;h2&gt;Try it!&lt;/h2&gt;
&lt;p&gt;Use the sliders to choose &lt;span class="math"&gt;\(n\)&lt;/span&gt;
 colours, and a single &lt;span class="math"&gt;\(\alpha\)&lt;/span&gt;
 and &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;
 for all colours. Try drawing balls from the urn, and see how the urn changes.  At any time you can display the urn in rank order or reset to the current slider position.&lt;/p&gt;
n: &lt;b id="n-output"&gt;&lt;/b&gt;
&lt;input class="n-slider" type="range" min="1" max="8"&gt;
α: &lt;b id="alpha-output"&gt;&lt;/b&gt;
&lt;input class="alpha-slider" type="range" min="1" max="8"&gt;
β: &lt;b id="beta-output"&gt;&lt;/b&gt;
&lt;input class="beta-slider" type="range" min="1" max="8"&gt;&lt;br&gt;&lt;p id="urn"&gt;Urn&lt;/p&gt;
&lt;br&gt;&lt;button id="draw"&gt;Draw!&lt;/button&gt;
&lt;button id="reset"&gt;Reset.&lt;/button&gt;
&lt;button id="rank"&gt;Order by rank.&lt;/button&gt;

&lt;script src="http://www.subsymbol.org/scripts/polya.js"&gt;
&lt;/script&gt;&lt;/div&gt;</description><category>mathjax</category><category>probability</category><guid>http://www.subsymbol.org/posts/polyas-urn.html</guid><pubDate>Fri, 25 Jul 2014 17:24:37 GMT</pubDate></item><item><title>The Grammaticality Continuum</title><link>http://www.subsymbol.org/posts/the-grammaticality-continuum.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Yesterday I was thinking about implementing &lt;em&gt;Latent Dirichlet Allocation&lt;/em&gt; (LDA).
LDA is used for &lt;em&gt;topic modelling&lt;/em&gt; — inducing a set of topics, such that a set of natural language documents can be represented by a mixture of those topics.
This is then used to estimate document similarity, and related information retrieval tasks.&lt;/p&gt;
&lt;p&gt;The first step in such a project is to &lt;em&gt;tokenise&lt;/em&gt; — to break up the text into words, removing attached punctuation, and regularising things like capitalisation.
When looking at the words in a document for the purposes of topic modelling,
it seems appropriate to merge word forms with the same root, or stem, instead of having each form of the "same" word represented individually.
The canonical way to tokenise for topic modelling involves stemming, and it also involves removing &lt;em&gt;stop words&lt;/em&gt; — words like "the", and "and" that are more syntactic than semantic.&lt;/p&gt;
&lt;p&gt;I am not entirely convinced that this latter is appropriate.
The reason is that the grammatically of words exists on a continuum.
Even the word "the" carries semantic weight, though its main function is probably to signal the boundaries of syntactic chunks.&lt;/p&gt;
&lt;hr class="docutils"&gt;&lt;blockquote&gt;
&lt;p&gt;My favourite example of the syntactic function of "the" comes from &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Petr_Beckmann"&gt;Petr Beckmann&lt;/a&gt; 's book &lt;em&gt;The structure of language: a new approach&lt;/em&gt;, which has profoundly influenced me since my undergraduate days.
In it he shows how the following headline is disambiguated by the placement of "the" before or after "biting":&lt;/p&gt;
&lt;p&gt;"Man Refuses to Give up Biting Dog"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils"&gt;&lt;p&gt;A couple of years ago at &lt;a class="reference external" href="http://www.wikicfp.com/cfp/servlet/event.showcfp?eventid=18614"&gt;the NAACL conference&lt;/a&gt;,
there was a session where a few prominent computational linguists presented their favourite papers from the past.
Eugene Charniak presented Kenneth Church's 2000 COLING paper: &lt;em&gt;Empirical Estimates of Adaptation:&lt;/em&gt;
&lt;em&gt;The chance of Two Noriegas is closer to&lt;/em&gt; &lt;span class="math"&gt;\(p/2\)&lt;/span&gt;
 &lt;em&gt;than&lt;/em&gt; &lt;span class="math"&gt;\(p^2\)&lt;/span&gt;
.
It introduced a measure of adaptation for language models based on how much a recent occurrence of a word increases its tendency to occur beyond what is already expected.&lt;/p&gt;
&lt;p&gt;Charniak used this paper as a background with which to present a new idea about the way the prior likelihood of a word predicts its future occurrences.
He divided words into sets according to how well their priors predicted them.
Stop words were most likely to be true to priors, and content words least, with verbs at the end of the spectrum.&lt;/p&gt;
&lt;p&gt;At the time I took this as evidence for the stratification of grammaticality.
Because of this stratification, treating stop words as a special set appears arbitrary and oversimplified.
I expect that leaving stop words in a topic model would simply result in having some topics that are distributed more evenly throughout the corpus of documents.
These topics would discriminate among documents poorly.
However, this result should also be part of a continuum.
It may be useful to account for the distribution of topics when using them in LDA, in a way analogous to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;inverse document frequency&lt;/a&gt; in &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Latent_semantic_analysis"&gt;latent semantic analysis&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils"&gt;&lt;p&gt;More generally, I am interested in the phenomenon that words vary in their semantic and syntactic load.
Even just within semantics, a morpheme may carry more than one meaning that cannot be decomposed linguistically.
For example, "uncle" is male, and while we could assign "uncle" a set of semantic features in a computer system in order to reason about its meaning, those features are only implicit in English.
In &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Logogram"&gt;logographic writing systems&lt;/a&gt; this is all the more apparent.&lt;/p&gt;
&lt;p&gt;This simultaneity of features in an apparently linear system is, to me, one of the most interesting aspects of language, and one of the reasons computational linguistics is difficult and rewarding.&lt;/p&gt;</description><category>computational linguistics</category><category>lda</category><category>lsa</category><category>mathjax</category><guid>http://www.subsymbol.org/posts/the-grammaticality-continuum.html</guid><pubDate>Fri, 25 Jul 2014 15:20:07 GMT</pubDate></item><item><title>Productively Lost</title><link>http://www.subsymbol.org/posts/productively-lost.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Yesterday Hacker School's resident &lt;a class="reference external" href="http://blog.melchua.com/about/"&gt;Mel Chua&lt;/a&gt; shared her work on educational psychology theory for Hacker School &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/productively-lost.html#id2" id="id1"&gt;[1]&lt;/a&gt;.
I had seen an earlier iteration of this talk from PyCon video archives, and it was useful to me then.
However, this time I had more relevant experience with which to understand it.
Hacker School is the first time I have had such a fluid and indeterminate educational experience.
Even graduate school was more structured, and with more fixed goals.&lt;/p&gt;
&lt;p&gt;I have previously compared Hacker School to a game of Tetris, in which new exciting things are constantly dropping from the sky, and you can't get them all and fit them all into your life.
Eventually you will lose, but it is fun to try, anyway.
I like this analogy, but in some ways it is too passive.
Hacker School (and life in general, if you let it) is more like a giant maze with more and more doors appearing all the time.
Many paths connect to each other, and you may find yourself back where you were before, but from a new perspective.
Here I can see more clearly than ever before the unboundedness of the space of learning, and this makes the idea of a best path through it almost laughable.
That's not to say that there are no poor ways to learn.
Only that that are many good ways.&lt;/p&gt;
&lt;p&gt;One central message from Mel's talk was the idea of being &lt;em&gt;Productively Lost&lt;/em&gt;.
Given that you are your own guide in an infinite maze makes being lost natural.
The question is how to make the best of your learning given that situation.&lt;/p&gt;
&lt;p&gt;Mel talked about using measurement to guide learning, in analogy with Test-Driven-Design.
She talked about how to most effectively join an open source project so that you can maximise your interactions and contributions for everyone's benefit, and for your own development.
There was also a section on motivation, self-efficacy, and attitudes.&lt;/p&gt;
&lt;p&gt;She mentioned different learning styles, and followed up later in the day with a workshop on the topic.
I found this enormously helpful, because instead of just coming out with a label, which I have done in the past with this kind of theory,
I was able to see strategies that make better use of my strengths.
By reviewing my experiences at Hacker School so far, and relating them to these axes, I feel I am in a better position to enhance my learning experiences deliberately.&lt;/p&gt;
&lt;p&gt;Mel also talked about the progression of learning.
Learning tends to follow a cyclical pattern of periods of &lt;em&gt;assimilation&lt;/em&gt; of new ideas into an existing mental model followed by a paradigm shift that requires &lt;em&gt;accommodation&lt;/em&gt;.
Accommodation is needed when new ideas are fitting less well into the existing model, and an extensive refactorisation makes everything fit more naturally.
This stage is slow and uncomfortable, and may even feel like a regression.
After this, there is a shorter period during which learning new things with the new model is fast and rewarding, before reaching another steadier state of assimilation.&lt;/p&gt;
&lt;hr class="docutils"&gt;&lt;p&gt;Even though I have taken my own way on some critical aspects of my life,
much of my life is characterisable by following paths that were set by someone else, or were simply unexamined pursuit of "the way things are done".
Applying to Hacker School in the first place was a big, intimidating step away from this pattern that stretched my courage.
It rivals the most rewarding decisions of my life so far.
The increased autonomy and competence I am developing here feels like a new freedom, a tipping point into a feedback loop of self-expression and creative action that goes way beyond any particular programming concept I have learned while here.&lt;/p&gt;
&lt;p&gt;Becoming comfortable with this fundamental lostness, and yet feeling adequate to navigate it, is ultimately much more empowering than the security of excelling at following well-lit, paths sanctioned and rewarded by others.&lt;/p&gt;
&lt;hr class="docutils"&gt;&lt;p&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/productively-lost.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Slides from last year's version here: &lt;a class="reference external" href="http://blog.melchua.com/2013/10/07/edupsych-for-hacker-schoolers-v-1-1-presentation-slides/"&gt;http://blog.melchua.com/2013/10/07/edupsych-for-hacker-schoolers-v-1-1-presentation-slides/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</description><category>Mel Chua</category><category>courage</category><category>education</category><category>hacker school</category><category>psychology</category><guid>http://www.subsymbol.org/posts/productively-lost.html</guid><pubDate>Wed, 23 Jul 2014 15:21:37 GMT</pubDate></item><item><title>Addresses and Contents</title><link>http://www.subsymbol.org/posts/addresses-and-contents.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="section" id="what-are-we-naming"&gt;
&lt;h2&gt;What are we naming?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The name of the song is called "Haddocks' Eyes."'&lt;/p&gt;
&lt;p&gt;'Oh, that's the name of the song, is it?' Alice said, trying to feel interested.&lt;/p&gt;
&lt;p&gt;'No, you don't understand,' the Knight said, looking a little vexed. 'That's what the name is called. The name really is "The Aged Aged Man."'&lt;/p&gt;
&lt;p&gt;'Then I ought to have said "That's what the song is called"?' Alice corrected herself.&lt;/p&gt;
&lt;p&gt;'No, you oughtn't: that's quite another thing! The song is called "Ways and Means": but that's only what it's called, you know!'&lt;/p&gt;
&lt;p&gt;'Well, what is the song, then?' said Alice, who was by this time completely bewildered.&lt;/p&gt;
&lt;p&gt;'I was coming to that,' the Knight said. 'The song really is "A-sitting On A Gate": and the tune's my own invention.'&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="http://www.alice-in-wonderland.net/books/2chpt8.html"&gt;Alice Through the Looking Glass&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="mutability-applies-to-content"&gt;
&lt;h2&gt;Mutability applies to content&lt;/h2&gt;
&lt;p&gt;I have been designing a system that seeks to change the way we name our data:
instead of naming the hierarchical way, using directories (or folders), it will name the category way, using tags.
Because the system needed an ID for every file it tagged, and perhaps for no other good reason than that I am fond of content-based hashing,
I chose to use a content-based hash for the IDs.
However, this ID is not a good match for mutable files.
I had been putting off thinking about how to handle mutable files, figuring I could add that functionality later.&lt;/p&gt;
&lt;p&gt;When I was finally ready to confront mutable files, I realised that I was running up against a fundamental issue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="people-often-conflate-addresses-with-contents-when-naming-things"&gt;
&lt;h2&gt;People often conflate addresses with contents when naming things&lt;/h2&gt;
&lt;p&gt;Take for example the problem of citation.
If you cite a book or a research paper, then what you are citing is the contents.
When we first started wanting to cite URLs, we treated them as though we were addressing content, but we aren't.
URLs point to content that can change.&lt;/p&gt;
&lt;p&gt;Of course, this issue shows up in many areas of computer science whenever we use references.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystems"&gt;
&lt;h2&gt;Filesystems&lt;/h2&gt;
&lt;p&gt;In a filesystem, we usually refer to files by their paths.
The relationships between paths, addresses (inodes), and contents are shown here:&lt;/p&gt;
&lt;img alt="https://lh5.googleusercontent.com/-0dFaK3jKirQ/U78BnodwrUI/AAAAAAAACPs/mGzaDJfLZk4/w426-h376-no/name_triangle.png" src="https://lh5.googleusercontent.com/-0dFaK3jKirQ/U78BnodwrUI/AAAAAAAACPs/mGzaDJfLZk4/w426-h376-no/name_triangle.png"&gt;&lt;p&gt;That is, a pathname refers to a single inode, but not necessarily vice versa.
An inode has exactly one set of contents, but those contents may be replicated in many inodes in the system.
I didn't recognise at first that the problem of mutable and immutable files is the distinction between addresses and contents.&lt;/p&gt;
&lt;p&gt;As far as file systems go, I don't know of any that make the distinction between contents and addresses, except Tahoe-LAFS.
The reference to an immutable file in Tahoe is content based for integrity and deduplication.
The reference to a mutable file just specifies a unique "slot".&lt;/p&gt;
&lt;p&gt;I've decide to follow this paradigm in Protagonist.
Both addresses and contents should be eligible for tagging.
Tagging the box will use the inode.
Tagging the contents will use the hash.&lt;/p&gt;
&lt;!-- The fact that we make extensive use of links in our systems attests the fact that hierarchies are not a great model for naming things. --&gt;
&lt;/div&gt;</description><category>cs</category><category>linguistics</category><category>names</category><category>storage</category><guid>http://www.subsymbol.org/posts/addresses-and-contents.html</guid><pubDate>Wed, 09 Jul 2014 21:42:03 GMT</pubDate></item><item><title>How I transformed a Blogger blog to a Nikola two-blog website</title><link>http://www.subsymbol.org/posts/how-i-transformed-a-blogger-blog-to-a-nikola-two-blog-website.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;In the last post I described why I wanted to move my blog, and what went into my choices.
My goal in exporting my site from Blogger to Nikola was to separate my content into two separate blogs on a single site:
one which is the primary blog, and the other which resides in the background.
I wanted them to be archived separately.
I also wanted there to be a front page that didn't change every time I wrote a new post.&lt;/p&gt;
&lt;div class="section" id="importing-the-blog"&gt;
&lt;h2&gt;Importing the blog&lt;/h2&gt;
&lt;p&gt;Nikola has a plugin to import a blog from Blogger, so the first step was to import the blog.
To import, I took the following steps:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;First, I exported my blog from Blogger, which gave me a file called &lt;cite&gt;blog-07-05-2014.xml&lt;/cite&gt;. Then,&lt;/li&gt;
&lt;/ul&gt;&lt;pre class="code literal-block"&gt;
$ sudo pip install nikola
$ nikola plugin -i import_blogger
$ nikola import_blogger -o site blog-07-05-2014.xml # The -o tells nikola what directory to make the site in.
&lt;/pre&gt;
&lt;p&gt;After this, I had some cleanup to do.
For one thing, Nikola renamed all the Blogger files (in a sensible way).
Blogger has date-derived subdirectories for posts, whereas in Nikola all the posts are kept in one folder, called "posts"
So when the new site is up, redirects will be required for anyone with the old link.&lt;/p&gt;
&lt;p&gt;The import gave me a file called &lt;cite&gt;url_map.csv&lt;/cite&gt;, which contained all the information necessary to redirect the old links to their new locations, but as far as I could tell, those redirects still had to be encoded into the configuration file to take effect.
Since I only had a few, I did this manually.
For every line in the url_map, I inserted a tuple into the &lt;cite&gt;REDIRECTIONS&lt;/cite&gt; list in &lt;cite&gt;conf.py&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The result at this point was a Nikola blog that contained everything the old blog did.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-it-not-a-blog"&gt;
&lt;h2&gt;Making it not a blog&lt;/h2&gt;
&lt;p&gt;There is a document in the Nikola project describing &lt;a class="reference external" href="http://getnikola.com/creating-a-site-not-a-blog-with-nikola.html"&gt;how to make a non-blog site&lt;/a&gt;.
The instructions boil down to changing three lines of &lt;cite&gt;conf.py&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="section" id="posts-and-pages"&gt;
&lt;h3&gt;Posts and Pages&lt;/h3&gt;
&lt;p&gt;As usual, Nikola distinguishes two different kinds of text-derived files.&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;em&gt;Posts&lt;/em&gt; are blog files.
They are archived, indexed by tag, and ordered by date for display.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pages&lt;/em&gt; are essentially independent.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So to make a blog into a non-blog, you simply manipulate the variable &lt;cite&gt;POSTS&lt;/cite&gt; defined in &lt;cite&gt;conf.py&lt;/cite&gt;.
&lt;cite&gt;POSTS&lt;/cite&gt; and &lt;cite&gt;PAGES&lt;/cite&gt; are lists describing where to find posts or pages respectively, where to render them, and what template to use for them.
We let the &lt;cite&gt;POSTS&lt;/cite&gt; list be empty, so everything on the site will be a page.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
POSTS = []
PAGES = [
        ("pages/*.rst", "", "story.tmpl"),
        ("pages/*.txt", "", "story.tmpl"),
        ]
&lt;/pre&gt;
&lt;p&gt;The two entries for &lt;cite&gt;PAGES&lt;/cite&gt; are here to allow either txt or rst, but the one that comes first is what will be used when you use the &lt;cite&gt;new_post&lt;/cite&gt; command.&lt;/p&gt;
&lt;p&gt;So you can create a &lt;em&gt;page&lt;/em&gt; called "index.html" by running &lt;cite&gt;new_post -p&lt;/cite&gt;, and giving it the name &lt;cite&gt;index&lt;/cite&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ nikola new_post -p

[...]

Creating New Page
-----------------

Title: index

[...]
INFO: new_page: Your page's text is at: pages/index.rst
&lt;/pre&gt;
&lt;p&gt;Since we put it at "", which is the top level of the site, it will be what you see on the "front page".&lt;/p&gt;
&lt;p&gt;Unfortunately, this creates a conflict, because when you build the site, the &lt;em&gt;blog&lt;/em&gt; part is already wired to make an index.html file in the top-level directory, since that's how blogs normally appear.
So you intercept this by adding to &lt;cite&gt;conf.py&lt;/cite&gt; the line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
INDEX_PATH = "blog"
&lt;/pre&gt;
&lt;p&gt;This just makes it so the blog index is now created under the folder blog, instead of the top level, and it no longer conflicts.&lt;/p&gt;
&lt;p&gt;It also means that now you can have a regular blog under the subdirectory blog, by putting options back in for &lt;cite&gt;POSTS&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
POSTS = [("posts/*.rst", "blog", "post.tmpl")]
&lt;/pre&gt;
&lt;p&gt;But this is not enough for us, because we have imported posts from Blogger that were also being found from the &lt;cite&gt;POSTS&lt;/cite&gt; list.
There is another entry in &lt;cite&gt;POSTS&lt;/cite&gt; that we need back, that tells Nikola to also collect and render existing html files, such as those we imported.
So we need to add:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
("posts/*.html", "blog", "post.tmpl")
&lt;/pre&gt;
&lt;p&gt;back into the list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="two-blogs"&gt;
&lt;h2&gt;Two blogs&lt;/h2&gt;
&lt;p&gt;At this point I had part of what I wanted.
I had a front page separate from my blog, and all of my previous blog reachable from the site.
But I still wanted to have two blogs, a primary one for themed entries, and a journal for unstructured reflections.&lt;/p&gt;
&lt;p&gt;Here are the steps I took to factor the blogs apart:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Made a new directory for the journal posts called "journal", and moved the appropriate files into it.&lt;/li&gt;
&lt;li&gt;Added ("journal/&lt;em&gt;.rst", "journal", "story.tmpl") and ("journal/&lt;/em&gt;.html", "journal", "story.tmpl") to the &lt;cite&gt;PAGES&lt;/cite&gt; list, so old and new journal entries can be found for rendering.&lt;/li&gt;
&lt;li&gt;Updated the conf.py &lt;cite&gt;REDIRECTIONS&lt;/cite&gt; to reflect those&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This worked to render them and include them in the site, but the journal articles were not indexed.
That meant that if I knew the URL, I could go to the article, but a visitor to the site could never discover them.&lt;/p&gt;
&lt;p&gt;To add indexing I had to add to conf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
STORY_INDEX = True
&lt;/pre&gt;
&lt;p&gt;But again, this created a conflict with multiple files called "index.html" trying to go in the same folder.
So I also had to change the name of the index.  I chose "index.htm", so that the server would automatically redirect.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
INDEX_FILE = "index.htm"
&lt;/pre&gt;
&lt;p&gt;Finally, I wanted the journal to be findable without knowing the directory name "journal", so I updated the navigation links:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
NAVIGATION_LINKS = {
 DEFAULT_LANG: (
     ("/archive.html", "Archive"),
     ("/categories/", "Tags"),
     ("/blog/", "Blog"),
     ("/journal/", "Journal"),
     ("/rss.xml", "RSS feed"),
  ),
 }
&lt;/pre&gt;
&lt;p&gt;As an extra configuration tweak, I set &lt;cite&gt;TAG_PAGES_ARE_INDEXES = True&lt;/cite&gt;, so that when you go to the page for a given tag, it renders the posts themselves, rather than a list.&lt;/p&gt;
&lt;p&gt;I would like to do that for my journal index as well, but that feature is not yet general, so if you navigate to "Journal" you will get a list of posts, and unfortunately, since it is a journal, they are named by date.
Moreover, their tags aren't collected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parting-thoughts"&gt;
&lt;h2&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;All in all, I'm satisfied with the move.
I got a lot of help from the Nikola community, and my main requirements are fulfilled.&lt;/p&gt;
&lt;p&gt;There are a few remaining troubles.&lt;/p&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;I signed up with Disqus, and think I have initiated the process of importing my old comments, which I was reluctant to lose.
It takes an unspecified amount of time to complete, so I'm hoping that will take care of itself now, but I'm uncertain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orphaned-rst"&gt;
&lt;h3&gt;Orphaned rst&lt;/h3&gt;
&lt;p&gt;Because of the way I built my Blogger site: writing in reStructuredText, converting to HTML, and uploading, I still have the original, pristine rst files on my local system, but Nikola doesn't use them.
It uses the backported HTML from Blogger.
In order to inject the old rst files into Nikola, however, would require manually editing them all to include the correct headers and timestamps.
This seems like a lot of work, and I'm not willing to do it right now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>blogger</category><category>blogging</category><category>nikola</category><guid>http://www.subsymbol.org/posts/how-i-transformed-a-blogger-blog-to-a-nikola-two-blog-website.html</guid><pubDate>Tue, 08 Jul 2014 16:59:38 GMT</pubDate></item><item><title>Moving my site off of Blogger</title><link>http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;I was having two problems with the setup of this website.
First, I wanted to factor out &lt;a class="reference external" href="http://www.subsymbol.org/journal/"&gt;the experiment in vulnerability and transparency that I have been doing by keep a log of my daily goals, progress, and insights at Hacker School&lt;/a&gt;.
I like the experiment, but I wanted it to be separate from &lt;a class="reference external" href="http://www.subsymbol.org/blog/"&gt;articles I write more deliberately&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second problem was that I wanted to migrate from Blogger.&lt;/p&gt;
&lt;p&gt;Blogger has advantages.
It is easy to set up, and freely hosted.
It has themes, comments, and a variety of plugins.
You can export your stuff if you want to, so you aren't completely locked in.&lt;/p&gt;
&lt;p&gt;However, Blogger is not a good match for someone who wants fine-grained control over her content.
My use of Blogger for the three sites I have hosted on it has consisted of the following elaborate dance:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;Edit my post in reStructuredText &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert my post into HTML using a custom script I adapted from &lt;a class="reference external" href="https://pypi.python.org/pypi/rst2blogger"&gt;rst2blogger&lt;/a&gt; &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cut and paste my post into the Blogger compose form, click &lt;cite&gt;Preview&lt;/cite&gt;, and see if it looked ok.&lt;/li&gt;
&lt;li&gt;Repeat until all typos and other issues were resolved.&lt;/li&gt;
&lt;li&gt;Click &lt;cite&gt;Publish&lt;/cite&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The result of all this work was a site that looked more-or-less how I wanted it to in some ways, but was frustrating in others.
For example,&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;I couldn't change the css styles that went with a given theme, (and some of them were really dysfunctional).&lt;/li&gt;
&lt;li&gt;I couldn't make the site &lt;em&gt;not a blog&lt;/em&gt; — the blog assumption is that your most recent content ought to be your most prominent, and this is not an appropriate assumption for some of my use cases.
I sometimes found myself putting off making a post that was less compelling until I knew I could follow it with a better one quickly!
The restrictiveness wasn't serving me.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, a little independence from Google seems healthy.&lt;/p&gt;
&lt;p&gt;What I really wanted was a static site generator, with no dynamic logic on a server-side database.
I wanted my whole site complete and rendered on my local machine to do with what I liked.
In other words, I wanted a static site generator.&lt;/p&gt;
&lt;div class="section" id="choosing-a-static-site-generator"&gt;
&lt;h2&gt;Choosing a static site generator&lt;/h2&gt;
&lt;p&gt;My criteria were:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Works to generate non-blog sites.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gave me two choices that I knew of: &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, and &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have had my eyes on Pelican for some time now.
I didn't like the way the resulting websites looked, though, until recently.
They had a jarring "I'm a programmer, not a designer" feel.
Being a programmer and not a designer, I can't articulate it much more precisely than that.
These days, the sites look fine to me.
The docs are well written, the code looks good, and &lt;a class="reference external" href="http://www.lothar.com/blog/"&gt;people whose opinions about such things I respect&lt;/a&gt; use it.&lt;/p&gt;
&lt;p&gt;In the meantime, I also found out about Nikola,
which was recommended by &lt;a class="reference external" href="https://github.com/punchagan"&gt;another respected coder-friend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to use Nikola, in part because it has a plugin to import from Blogger, and in part because the above-mentioned friend offered to help me.&lt;/p&gt;
&lt;p&gt;In the next post, I'll describe how I ported my Blogger blog into a Nikola blog.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I used to write in pure HTML, but after much goading from Zooko, I switched to rst.  I'm glad; I find rst more flexible.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I didn't want the script to deploy it, because I didn't want to trust the script with my Google authentication, so I took that part out.  I also changed some heading styles that Blogger doesn't render well.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>blogger</category><category>blogging</category><category>nikola</category><guid>http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html</guid><pubDate>Tue, 08 Jul 2014 16:48:18 GMT</pubDate></item><item><title>Literally ironic semantic shifts are actually very typical</title><link>http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="literally-ironic-semantic-shifts-are-ironically-very-typical"&gt;   &lt;p&gt;I recently saw a &lt;a class="reference external" href="http://www.npr.org/2014/04/23/306238447/new-browser-plug-in-would-literally-annihilate-this-headline"&gt;story about a whimsical browser plug-in written by Mike Lazer-Walker&lt;/a&gt;(incidentally, a &lt;a class="reference external" href="https://www.hackerschool.com/blog/30-words-are-hard"&gt;Hacker Schooler&lt;/a&gt;), that substitutes all occurrences of the word 'literally' with the word 'figuratively'. I posted it with (almost) no comment on Facebook, to which the only response was from a Waterloo friend, who actually found the substitution annoying, because, he argued, 'figuratively' is not what is usually meant.&lt;/p&gt;&lt;p&gt;Of course, he is right about that. 'Literally', like 'very', 'really', 'truly', and in some cases 'actually' &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id3" id="id1"&gt;[1]&lt;/a&gt;, share a common semantic shift. They all originally meant something like 'do not take the following as exaggeration or metaphor' (insofar as any language use can be non-metaphorical), and have all become intensifiers. This is, of course, somewhat ironic (in the situational sense of 'ironic', which is neither the literary sense, nor the emerging sense of 'not what I wanted' &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id4" id="id2"&gt;[2]&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;I don't cringe when I hear 'very', except insofar as it is often vacuous. That I do cringe on hearing 'literally' used as an intensifier is probably because, unlike 'very', the current use which is very &lt;a class="reference external" href="http://www.etymonline.com/index.php?term=very"&gt;old&lt;/a&gt;, this meaning of 'literally' emerged in my adulthood, and so it sounds unnatural to me. When wearing my linguist hat, I like to embrace diversity and change, rather than taking the stance that my dialect is 'correct'. The strongest stance I can fairly take is that in &lt;em&gt;my&lt;/em&gt; dialect, the new meaning is unacceptable, or that using this meaning has certain social implications about the speaker.&lt;/p&gt;&lt;p&gt;But rather than taking the plug-in to be suggesting an actual solution, I take it in the spirit of Mark Twain's advice: 'Substitute 'damn' every time you're inclined to write 'very;' your editor will delete it and the writing will be just as it should be.' Once the reader or writer sees 'figuratively', the appropriate transformation should be more readily obvious.&lt;/p&gt;&lt;p&gt;More likely, it is simply an elaborate joke made by a clever person while exploring how to write plug-ins. In any case, I liked the idea, both for its wit, and for the other fun linguistics ideas it points to, including, for example, &lt;a class="reference external" href="http://www.gizoogle.net/tranzizzle.php?search=www.subsymbol.org&amp;amp;se=Go+Git+Dis+Shiznit"&gt;tranzizzle&lt;/a&gt; (hat tip to &lt;a class="reference external" href="http://www.gizoogle.net/tranzizzle.php?search=www.cs.cmu.edu%2F~nasmith&amp;amp;se=Go+Git+Dis+Shiznit"&gt;Noah Smizzle&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;The question I am left with is, given this development, what word do I use &lt;em&gt;now&lt;/em&gt; if I want the literal meaning of literal?&lt;/p&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;'Actually' is often used to make a contrast.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See this comic: &lt;a class="reference external" href="http://theoatmeal.com/comics/irony"&gt;http://theoatmeal.com/comics/irony&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>linguistics</category><guid>http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html</guid><pubDate>Sat, 26 Apr 2014 22:06:00 GMT</pubDate></item><item><title>Transparent Learning</title><link>http://www.subsymbol.org/posts/201403transparent-learning.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="transparent-learning"&gt;   &lt;p&gt;I have applied to &lt;a class="reference external" href="https://www.hackerschool.com"&gt;Hacker School&lt;/a&gt; for the Summer 2014 batch.  I'm immensely excited about it for various reasons, but the one I wanted to mention here now is the attitude toward learning that Hacker School promotes.&lt;/p&gt;&lt;p&gt;One of the few Rules of Conduct at Hacker School is not to &lt;a class="reference external" href="https://www.hackerschool.com/manual"&gt;feign surprise&lt;/a&gt; when someone doesn't know something.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;[No feigning surprise] means you shouldn't act surprised when people say they don't know something. This applies to both technical things ("What?! I can't believe you don't know what the stack is!") and non-technical things ("You don't know who RMS is?!"). Feigning surprise has absolutely no social or educational benefit: When people feign surprise, it's usually to make them feel better about themselves and others feel worse. And even when that's not the intention, it's almost always the effect. As you've probably already guessed, this rule is tightly coupled to our belief in the importance of people feeling comfortable saying "I don't know" and "I don't understand."&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;The other side of the coin of not feigning surprise is being transparent about your own learning.&lt;/p&gt;&lt;p&gt;When I meet smart people I admire, I am usually eager to show them that &lt;strong&gt;I am like them&lt;/strong&gt;. So I look for opportunities to demonstrate that we share ideas and values. In a programming community, this could translate into finding a reason to bring up topics such as stacks or RMS. There is nothing inherently wrong with this. It is normal and healthy to establish common ground. It feels good.&lt;/p&gt;&lt;!-- Although I'm certain that this is not just a women's issue, I do expect that being female confers more assumptions that a person don't actually know much about math or computers. Whether or not it is true that people I meet make such assumptions, I often feel anxiety about it. --&gt;&lt;p&gt;The problem comes when you want to interact with someone as you continue to learn. If you can't comfortably say “I don't know what a stack is.”, then you deny yourself and your peers the opportunity to collaboratively change that. More importantly, your silence reinforces the idea that it is &lt;em&gt;not okay&lt;/em&gt; to not know or not understand. It is more subtle than feigning surprise, but not necessarily less powerful.&lt;/p&gt;&lt;p&gt;In the process of applying to Hacker School, I've looked at the blogs of some of the facilitators. In her blog, Allison Kaptur takes this concept of transparency a step further. For example, in &lt;a class="reference external" href="http://akaptur.github.io/blog/2013/11/15/introduction-to-the-python-interpreter/"&gt;a post in which she teaches about the Python interpreter&lt;/a&gt;, Allison writes (emphasis mine):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;There are four steps that python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens. The parser takes those tokens and generates a structure that shows their relationship to each other (in this case, an Abstract Syntax Tree). The compiler then takes the AST and turns it into one (or more) code objects. Finally, the interpreter takes each code object executes the code it represents.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;I’m not going to talk about lexing, parsing, or compiling at all today,&lt;/em&gt; &lt;strong&gt;mainly because I don’t know anything about these steps yet.&lt;/strong&gt; &lt;em&gt;Instead, we’ll suppose that all that went just fine, and we’ll have a proper python code object for the interpreter to interpret.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To me, this feels like radical activism. Even if I don't get in to Hacker School, I want to learn this skill of portraying myself authentically, even if it exposes some vulnerability. Fundamentally, it's about separating self-worth from knowledge, and getting over Imposter Syndrome.&lt;/p&gt;&lt;p&gt;As a step in this direction, I am posting the fact that I have applied to Hacker School, even though I may not be admitted. If that happens, I will be very disappointed, and it will be embarrassing for that to be public, but I want to say that it's okay to fail at things, and it's okay to make mistakes.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.subsymbol.org/posts/201403transparent-learning.html</guid><pubDate>Mon, 17 Mar 2014 15:32:00 GMT</pubDate></item><item><title>The Year of the Em Dash</title><link>http://www.subsymbol.org/posts/201401the-year-of-em-dash.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="the-year-of-the-em-dash"&gt;   &lt;p&gt;I admit it. The first thing I thought of when noticing what year was coming was—"em dash". The unicode character 2014 is the em dash, and as I am wont to type it in manually it is practically synonymous to me &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201401the-year-of-em-dash.html#id2" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We symbolic creatures like to embue meaning into all things. While I am not superstitious, I enjoy the Rorschach test–like nature of divination. If I ask myself to make a connection between the changing of the year right now and the character em dash, it reflects my state—and nothing more—but this does not diminish its value.&lt;/p&gt;&lt;p&gt;In contrast with last year's character—the en dash—which is supposed to be used in place of 'to' in spans such as 2010–2016, or as a hyphen between open compounds, as in "computational linguistics–machine learning conference", the em dash is used informally in places of commas, colons, or semicolons for emphasis, interruption, or an abrupt change of thought. So I'm expecting a year of diversion, a relevant but indirect route, with an ultimate return to the path previously intended.&lt;/p&gt;&lt;p&gt;We have been stuck in a run of dash characters since 2010, the year of the hyphen, and won't escape until 2016, the year of the double vertical line (‖), which, I suppose, will entail some sort of parallelism.&lt;/p&gt;&lt;p&gt;Happy New Year!&lt;/p&gt;&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201401the-year-of-em-dash.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ctrl-shift-u 2014 will do it in many applications.  To enable this in emacs, put "(global-set-key (kbd "C-S-u") 'quoted-insert)" in your .emacs file.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><guid>http://www.subsymbol.org/posts/201401the-year-of-em-dash.html</guid><pubDate>Thu, 02 Jan 2014 01:35:00 GMT</pubDate></item><item><title>Brief notes from the Front Range NLP meeting</title><link>http://www.subsymbol.org/posts/201311brief-notes-from-front-range-nlp-meeting.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Last night I led &lt;a href="http://www.meetup.com/Front-Range-NLP-Natural-Language-Processing/events/146468962/"&gt;the discussion&lt;/a&gt; on Noah Smith's paper &lt;a href="http://arxiv.org/abs/1207.0245"&gt;Adversarial Evaluation for Models of Natural Language&lt;/a&gt;.  It was an interesting and animated discussion, and most of the valuable content was in the talking, but I'm posting my &lt;a href="http://www.cs.toronto.edu/~amber/adversarial_slides.html"&gt;slides&lt;/a&gt; for reference.  I also talked a bit about &lt;a href="https://github.com/lamber/malaprop"&gt;Malaprop&lt;/a&gt;, which builds an adversarial task along with a correction task.&lt;/p&gt;</description><guid>http://www.subsymbol.org/posts/201311brief-notes-from-front-range-nlp-meeting.html</guid><pubDate>Thu, 07 Nov 2013 15:13:00 GMT</pubDate></item></channel></rss>