<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>subsymbol.org</title><link>http://www.subsymbol.org/</link><description></description><language>en</language><lastBuildDate>Sat, 12 Jul 2014 10:55:00 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Addresses and Contents</title><link>http://www.subsymbol.org/posts/addresses-and-contents.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="section" id="what-are-we-naming"&gt;
&lt;h2&gt;What are we naming?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The name of the song is called "Haddocks' Eyes."'&lt;/p&gt;
&lt;p&gt;'Oh, that's the name of the song, is it?' Alice said, trying to feel interested.&lt;/p&gt;
&lt;p&gt;'No, you don't understand,' the Knight said, looking a little vexed. 'That's what the name is called. The name really is "The Aged Aged Man."'&lt;/p&gt;
&lt;p&gt;'Then I ought to have said "That's what the song is called"?' Alice corrected herself.&lt;/p&gt;
&lt;p&gt;'No, you oughtn't: that's quite another thing! The song is called "Ways and Means": but that's only what it's called, you know!'&lt;/p&gt;
&lt;p&gt;'Well, what is the song, then?' said Alice, who was by this time completely bewildered.&lt;/p&gt;
&lt;p&gt;'I was coming to that,' the Knight said. 'The song really is "A-sitting On A Gate": and the tune's my own invention.'&lt;/p&gt;
&lt;p class="attribution"&gt;—&lt;a class="reference external" href="http://www.alice-in-wonderland.net/books/2chpt8.html"&gt;Alice Through the Looking Glass&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="mutability-applies-to-content"&gt;
&lt;h2&gt;Mutability applies to content&lt;/h2&gt;
&lt;p&gt;I have been designing a system that seeks to change the way we name our data:
instead of naming the hierarchical way, using directories (or folders), it will name the category way, using tags.
Because the system needed an ID for every file it tagged, and perhaps for no other good reason than that I am fond of content-based hashing,
I chose to use a content-based hash for the IDs.
However, this ID is not a good match for mutable files.
I had been putting off thinking about how to handle mutable files, figuring I could add that functionality later.&lt;/p&gt;
&lt;p&gt;When I was finally ready to confront mutable files, I realised that I was running up against a fundamental issue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="people-often-conflate-addresses-with-contents-when-naming-things"&gt;
&lt;h2&gt;People often conflate addresses with contents when naming things&lt;/h2&gt;
&lt;p&gt;Take for example the problem of citation.
If you cite a book or a research paper, then what you are citing is the contents.
When we first started wanting to cite URLs, we treated them as though we were addressing content, but we aren't.
URLs point to content that can change.&lt;/p&gt;
&lt;p&gt;Of course, this issue shows up in many areas of computer science whenever we use references.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystems"&gt;
&lt;h2&gt;Filesystems&lt;/h2&gt;
&lt;p&gt;In a filesystem, we usually refer to files by their paths.
The relationships between paths, addresses (inodes), and contents are shown here:&lt;/p&gt;
&lt;img alt="https://lh5.googleusercontent.com/-0dFaK3jKirQ/U78BnodwrUI/AAAAAAAACPs/mGzaDJfLZk4/w426-h376-no/name_triangle.png" src="https://lh5.googleusercontent.com/-0dFaK3jKirQ/U78BnodwrUI/AAAAAAAACPs/mGzaDJfLZk4/w426-h376-no/name_triangle.png"&gt;&lt;p&gt;That is, a pathname refers to a single inode, but not necessarily vice versa.
An inode has exactly one set of contents, but those contents may be replicated in many inodes in the system.
I didn't recognise at first that the problem of mutable and immutable files is the distinction between addresses and contents.&lt;/p&gt;
&lt;p&gt;As far as file systems go, I don't know of any that make the distinction between contents and addresses, except Tahoe-LAFS.
The reference to an immutable file in Tahoe is content based for integrity and deduplication.
The reference to a mutable file just specifies a unique "slot".&lt;/p&gt;
&lt;p&gt;I've decide to follow this paradigm in Protagonist.
Both addresses and contents should be eligible for tagging.
Tagging the box will use the inode.
Tagging the contents will use the hash.&lt;/p&gt;
&lt;!-- The fact that we make extensive use of links in our systems attests the fact that hierarchies are not a great model for naming things. --&gt;
&lt;/div&gt;</description><category>cs</category><category>linguistics</category><category>names</category><category>storage</category><guid>http://www.subsymbol.org/posts/addresses-and-contents.html</guid><pubDate>Wed, 09 Jul 2014 21:42:03 GMT</pubDate></item><item><title>How I transformed a Blogger blog to a Nikola two-blog website</title><link>http://www.subsymbol.org/posts/how-i-transformed-a-blogger-blog-to-a-nikola-two-blog-website.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;In the last post I described why I wanted to move my blog, and what went into my choices.
My goal in exporting my site from Blogger to Nikola was to separate my content into two separate blogs on a single site:
one which is the primary blog, and the other which resides in the background.
I wanted them to be archived separately.
I also wanted there to be a front page that didn't change every time I wrote a new post.&lt;/p&gt;
&lt;div class="section" id="importing-the-blog"&gt;
&lt;h2&gt;Importing the blog&lt;/h2&gt;
&lt;p&gt;Nikola has a plugin to import a blog from Blogger, so the first step was to import the blog.
To import, I took the following steps:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;First, I exported my blog from Blogger, which gave me a file called &lt;cite&gt;blog-07-05-2014.xml&lt;/cite&gt;. Then,&lt;/li&gt;
&lt;/ul&gt;&lt;pre class="code literal-block"&gt;
$ sudo pip install nikola
$ nikola plugin -i import_blogger
$ nikola import_blogger -o site blog-07-05-2014.xml # The -o tells nikola what directory to make the site in.
&lt;/pre&gt;
&lt;p&gt;After this, I had some cleanup to do.
For one thing, Nikola renamed all the Blogger files (in a sensible way).
Blogger has date-derived subdirectories for posts, whereas in Nikola all the posts are kept in one folder, called "posts"
So when the new site is up, redirects will be required for anyone with the old link.&lt;/p&gt;
&lt;p&gt;The import gave me a file called &lt;cite&gt;url_map.csv&lt;/cite&gt;, which contained all the information necessary to redirect the old links to their new locations, but as far as I could tell, those redirects still had to be encoded into the configuration file to take effect.
Since I only had a few, I did this manually.
For every line in the url_map, I inserted a tuple into the &lt;cite&gt;REDIRECTIONS&lt;/cite&gt; list in &lt;cite&gt;conf.py&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;The result at this point was a Nikola blog that contained everything the old blog did.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="making-it-not-a-blog"&gt;
&lt;h2&gt;Making it not a blog&lt;/h2&gt;
&lt;p&gt;There is a document in the Nikola project describing &lt;a class="reference external" href="http://getnikola.com/creating-a-site-not-a-blog-with-nikola.html"&gt;how to make a non-blog site&lt;/a&gt;.
The instructions boil down to changing three lines of &lt;cite&gt;conf.py&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="section" id="posts-and-pages"&gt;
&lt;h3&gt;Posts and Pages&lt;/h3&gt;
&lt;p&gt;As usual, Nikola distinguishes two different kinds of text-derived files.&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;&lt;em&gt;Posts&lt;/em&gt; are blog files.
They are archived, indexed by tag, and ordered by date for display.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pages&lt;/em&gt; are essentially independent.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;So to make a blog into a non-blog, you simply manipulate the variable &lt;cite&gt;POSTS&lt;/cite&gt; defined in &lt;cite&gt;conf.py&lt;/cite&gt;.
&lt;cite&gt;POSTS&lt;/cite&gt; and &lt;cite&gt;PAGES&lt;/cite&gt; are lists describing where to find posts or pages respectively, where to render them, and what template to use for them.
We let the &lt;cite&gt;POSTS&lt;/cite&gt; list be empty, so everything on the site will be a page.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
POSTS = []
PAGES = [
        ("pages/*.rst", "", "story.tmpl"),
        ("pages/*.txt", "", "story.tmpl"),
        ]
&lt;/pre&gt;
&lt;p&gt;The two entries for &lt;cite&gt;PAGES&lt;/cite&gt; are here to allow either txt or rst, but the one that comes first is what will be used when you use the &lt;cite&gt;new_post&lt;/cite&gt; command.&lt;/p&gt;
&lt;p&gt;So you can create a &lt;em&gt;page&lt;/em&gt; called "index.html" by running &lt;cite&gt;new_post -p&lt;/cite&gt;, and giving it the name &lt;cite&gt;index&lt;/cite&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ nikola new_post -p

[...]

Creating New Page
-----------------

Title: index

[...]
INFO: new_page: Your page's text is at: pages/index.rst
&lt;/pre&gt;
&lt;p&gt;Since we put it at "", which is the top level of the site, it will be what you see on the "front page".&lt;/p&gt;
&lt;p&gt;Unfortunately, this creates a conflict, because when you build the site, the &lt;em&gt;blog&lt;/em&gt; part is already wired to make an index.html file in the top-level directory, since that's how blogs normally appear.
So you intercept this by adding to &lt;cite&gt;conf.py&lt;/cite&gt; the line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
INDEX_PATH = "blog"
&lt;/pre&gt;
&lt;p&gt;This just makes it so the blog index is now created under the folder blog, instead of the top level, and it no longer conflicts.&lt;/p&gt;
&lt;p&gt;It also means that now you can have a regular blog under the subdirectory blog, by putting options back in for &lt;cite&gt;POSTS&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
POSTS = [("posts/*.rst", "blog", "post.tmpl")]
&lt;/pre&gt;
&lt;p&gt;But this is not enough for us, because we have imported posts from Blogger that were also being found from the &lt;cite&gt;POSTS&lt;/cite&gt; list.
There is another entry in &lt;cite&gt;POSTS&lt;/cite&gt; that we need back, that tells Nikola to also collect and render existing html files, such as those we imported.
So we need to add:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
("posts/*.html", "blog", "post.tmpl")
&lt;/pre&gt;
&lt;p&gt;back into the list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="two-blogs"&gt;
&lt;h2&gt;Two blogs&lt;/h2&gt;
&lt;p&gt;At this point I had part of what I wanted.
I had a front page separate from my blog, and all of my previous blog reachable from the site.
But I still wanted to have two blogs, a primary one for themed entries, and a journal for unstructured reflections.&lt;/p&gt;
&lt;p&gt;Here are the steps I took to factor the blogs apart:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Made a new directory for the journal posts called "journal", and moved the appropriate files into it.&lt;/li&gt;
&lt;li&gt;Added ("journal/&lt;em&gt;.rst", "journal", "story.tmpl") and ("journal/&lt;/em&gt;.html", "journal", "story.tmpl") to the &lt;cite&gt;PAGES&lt;/cite&gt; list, so old and new journal entries can be found for rendering.&lt;/li&gt;
&lt;li&gt;Updated the conf.py &lt;cite&gt;REDIRECTIONS&lt;/cite&gt; to reflect those&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This worked to render them and include them in the site, but the journal articles were not indexed.
That meant that if I knew the URL, I could go to the article, but a visitor to the site could never discover them.&lt;/p&gt;
&lt;p&gt;To add indexing I had to add to conf.py:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
STORY_INDEX = True
&lt;/pre&gt;
&lt;p&gt;But again, this created a conflict with multiple files called "index.html" trying to go in the same folder.
So I also had to change the name of the index.  I chose "index.htm", so that the server would automatically redirect.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
INDEX_FILE = "index.htm"
&lt;/pre&gt;
&lt;p&gt;Finally, I wanted the journal to be findable without knowing the directory name "journal", so I updated the navigation links:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
NAVIGATION_LINKS = {
 DEFAULT_LANG: (
     ("/archive.html", "Archive"),
     ("/categories/", "Tags"),
     ("/blog/", "Blog"),
     ("/journal/", "Journal"),
     ("/rss.xml", "RSS feed"),
  ),
 }
&lt;/pre&gt;
&lt;p&gt;As an extra configuration tweak, I set &lt;cite&gt;TAG_PAGES_ARE_INDEXES = True&lt;/cite&gt;, so that when you go to the page for a given tag, it renders the posts themselves, rather than a list.&lt;/p&gt;
&lt;p&gt;I would like to do that for my journal index as well, but that feature is not yet general, so if you navigate to "Journal" you will get a list of posts, and unfortunately, since it is a journal, they are named by date.
Moreover, their tags aren't collected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parting-thoughts"&gt;
&lt;h2&gt;Parting thoughts&lt;/h2&gt;
&lt;p&gt;All in all, I'm satisfied with the move.
I got a lot of help from the Nikola community, and my main requirements are fulfilled.&lt;/p&gt;
&lt;p&gt;There are a few remaining troubles.&lt;/p&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;I signed up with Disqus, and think I have initiated the process of importing my old comments, which I was reluctant to lose.
It takes an unspecified amount of time to complete, so I'm hoping that will take care of itself now, but I'm uncertain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="orphaned-rst"&gt;
&lt;h3&gt;Orphaned rst&lt;/h3&gt;
&lt;p&gt;Because of the way I built my Blogger site: writing in reStructuredText, converting to HTML, and uploading, I still have the original, pristine rst files on my local system, but Nikola doesn't use them.
It uses the backported HTML from Blogger.
In order to inject the old rst files into Nikola, however, would require manually editing them all to include the correct headers and timestamps.
This seems like a lot of work, and I'm not willing to do it right now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>blogger</category><category>blogging</category><category>nikola</category><guid>http://www.subsymbol.org/posts/how-i-transformed-a-blogger-blog-to-a-nikola-two-blog-website.html</guid><pubDate>Tue, 08 Jul 2014 16:59:38 GMT</pubDate></item><item><title>Moving my site off of Blogger</title><link>http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;I was having two problems with the setup of this website.
First, I wanted to factor out &lt;a class="reference external" href="http://www.subsymbol.org/journal/"&gt;the experiment in vulnerability and transparency that I have been doing by keep a log of my daily goals, progress, and insights at Hacker School&lt;/a&gt;.
I like the experiment, but I wanted it to be separate from &lt;a class="reference external" href="http://www.subsymbol.org/blog/"&gt;articles I write more deliberately&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The second problem was that I wanted to migrate from Blogger.&lt;/p&gt;
&lt;p&gt;Blogger has advantages.
It is easy to set up, and freely hosted.
It has themes, comments, and a variety of plugins.
You can export your stuff if you want to, so you aren't completely locked in.&lt;/p&gt;
&lt;p&gt;However, Blogger is not a good match for someone who wants fine-grained control over her content.
My use of Blogger for the three sites I have hosted on it has consisted of the following elaborate dance:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;&lt;li&gt;Edit my post in reStructuredText &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id3" id="id1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Convert my post into HTML using a custom script I adapted from &lt;a class="reference external" href="https://pypi.python.org/pypi/rst2blogger"&gt;rst2blogger&lt;/a&gt; &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id4" id="id2"&gt;[2]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Cut and paste my post into the Blogger compose form, click &lt;cite&gt;Preview&lt;/cite&gt;, and see if it looked ok.&lt;/li&gt;
&lt;li&gt;Repeat until all typos and other issues were resolved.&lt;/li&gt;
&lt;li&gt;Click &lt;cite&gt;Publish&lt;/cite&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;The result of all this work was a site that looked more-or-less how I wanted it to in some ways, but was frustrating in others.
For example,&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;I couldn't change the css styles that went with a given theme, (and some of them were really dysfunctional).&lt;/li&gt;
&lt;li&gt;I couldn't make the site &lt;em&gt;not a blog&lt;/em&gt; — the blog assumption is that your most recent content ought to be your most prominent, and this is not an appropriate assumption for some of my use cases.
I sometimes found myself putting off making a post that was less compelling until I knew I could follow it with a better one quickly!
The restrictiveness wasn't serving me.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Also, a little independence from Google seems healthy.&lt;/p&gt;
&lt;p&gt;What I really wanted was a static site generator, with no dynamic logic on a server-side database.
I wanted my whole site complete and rendered on my local machine to do with what I liked.
In other words, I wanted a static site generator.&lt;/p&gt;
&lt;div class="section" id="choosing-a-static-site-generator"&gt;
&lt;h2&gt;Choosing a static site generator&lt;/h2&gt;
&lt;p&gt;My criteria were:&lt;/p&gt;
&lt;ul class="simple"&gt;&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Works to generate non-blog sites.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;This gave me two choices that I knew of: &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, and &lt;a class="reference external" href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have had my eyes on Pelican for some time now.
I didn't like the way the resulting websites looked, though, until recently.
They had a jarring "I'm a programmer, not a designer" feel.
Being a programmer and not a designer, I can't articulate it much more precisely than that.
These days, the sites look fine to me.
The docs are well written, the code looks good, and &lt;a class="reference external" href="http://www.lothar.com/blog/"&gt;people whose opinions about such things I respect&lt;/a&gt; use it.&lt;/p&gt;
&lt;p&gt;In the meantime, I also found out about Nikola,
which was recommended by &lt;a class="reference external" href="https://github.com/punchagan"&gt;another respected coder-friend&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to use Nikola, in part because it has a plugin to import from Blogger, and in part because the above-mentioned friend offered to help me.&lt;/p&gt;
&lt;p&gt;In the next post, I'll describe how I ported my Blogger blog into a Nikola blog.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I used to write in pure HTML, but after much goading from Zooko, I switched to rst.  I'm glad; I find rst more flexible.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I didn't want the script to deploy it, because I didn't want to trust the script with my Google authentication, so I took that part out.  I also changed some heading styles that Blogger doesn't render well.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>blogger</category><category>blogging</category><category>nikola</category><guid>http://www.subsymbol.org/posts/moving-my-site-off-of-blogger.html</guid><pubDate>Tue, 08 Jul 2014 16:48:18 GMT</pubDate></item><item><title>Literally ironic semantic shifts are actually very typical</title><link>http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="literally-ironic-semantic-shifts-are-ironically-very-typical"&gt;   &lt;p&gt;I recently saw a &lt;a class="reference external" href="http://www.npr.org/2014/04/23/306238447/new-browser-plug-in-would-literally-annihilate-this-headline"&gt;story about a whimsical browser plug-in written by Mike Lazer-Walker&lt;/a&gt;(incidentally, a &lt;a class="reference external" href="https://www.hackerschool.com/blog/30-words-are-hard"&gt;Hacker Schooler&lt;/a&gt;), that substitutes all occurrences of the word 'literally' with the word 'figuratively'. I posted it with (almost) no comment on Facebook, to which the only response was from a Waterloo friend, who actually found the substitution annoying, because, he argued, 'figuratively' is not what is usually meant.&lt;/p&gt;&lt;p&gt;Of course, he is right about that. 'Literally', like 'very', 'really', 'truly', and in some cases 'actually' &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id3" id="id1"&gt;[1]&lt;/a&gt;, share a common semantic shift. They all originally meant something like 'do not take the following as exaggeration or metaphor' (insofar as any language use can be non-metaphorical), and have all become intensifiers. This is, of course, somewhat ironic (in the situational sense of 'ironic', which is neither the literary sense, nor the emerging sense of 'not what I wanted' &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id4" id="id2"&gt;[2]&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;I don't cringe when I hear 'very', except insofar as it is often vacuous. That I do cringe on hearing 'literally' used as an intensifier is probably because, unlike 'very', the current use which is very &lt;a class="reference external" href="http://www.etymonline.com/index.php?term=very"&gt;old&lt;/a&gt;, this meaning of 'literally' emerged in my adulthood, and so it sounds unnatural to me. When wearing my linguist hat, I like to embrace diversity and change, rather than taking the stance that my dialect is 'correct'. The strongest stance I can fairly take is that in &lt;em&gt;my&lt;/em&gt; dialect, the new meaning is unacceptable, or that using this meaning has certain social implications about the speaker.&lt;/p&gt;&lt;p&gt;But rather than taking the plug-in to be suggesting an actual solution, I take it in the spirit of Mark Twain's advice: 'Substitute 'damn' every time you're inclined to write 'very;' your editor will delete it and the writing will be just as it should be.' Once the reader or writer sees 'figuratively', the appropriate transformation should be more readily obvious.&lt;/p&gt;&lt;p&gt;More likely, it is simply an elaborate joke made by a clever person while exploring how to write plug-ins. In any case, I liked the idea, both for its wit, and for the other fun linguistics ideas it points to, including, for example, &lt;a class="reference external" href="http://www.gizoogle.net/tranzizzle.php?search=www.subsymbol.org&amp;amp;se=Go+Git+Dis+Shiznit"&gt;tranzizzle&lt;/a&gt; (hat tip to &lt;a class="reference external" href="http://www.gizoogle.net/tranzizzle.php?search=www.cs.cmu.edu%2F~nasmith&amp;amp;se=Go+Git+Dis+Shiznit"&gt;Noah Smizzle&lt;/a&gt;).&lt;/p&gt;&lt;p&gt;The question I am left with is, given this development, what word do I use &lt;em&gt;now&lt;/em&gt; if I want the literal meaning of literal?&lt;/p&gt;&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;'Actually' is often used to make a contrast.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See this comic: &lt;a class="reference external" href="http://theoatmeal.com/comics/irony"&gt;http://theoatmeal.com/comics/irony&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><category>linguistics</category><guid>http://www.subsymbol.org/posts/201404literally-ironic-semantic-shifts-are.html</guid><pubDate>Sat, 26 Apr 2014 22:06:00 GMT</pubDate></item><item><title>Transparent Learning</title><link>http://www.subsymbol.org/posts/201403transparent-learning.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="transparent-learning"&gt;   &lt;p&gt;I have applied to &lt;a class="reference external" href="https://www.hackerschool.com"&gt;Hacker School&lt;/a&gt; for the Summer 2014 batch.  I'm immensely excited about it for various reasons, but the one I wanted to mention here now is the attitude toward learning that Hacker School promotes.&lt;/p&gt;&lt;p&gt;One of the few Rules of Conduct at Hacker School is not to &lt;a class="reference external" href="https://www.hackerschool.com/manual"&gt;feign surprise&lt;/a&gt; when someone doesn't know something.&lt;/p&gt;&lt;blockquote&gt;&lt;em&gt;[No feigning surprise] means you shouldn't act surprised when people say they don't know something. This applies to both technical things ("What?! I can't believe you don't know what the stack is!") and non-technical things ("You don't know who RMS is?!"). Feigning surprise has absolutely no social or educational benefit: When people feign surprise, it's usually to make them feel better about themselves and others feel worse. And even when that's not the intention, it's almost always the effect. As you've probably already guessed, this rule is tightly coupled to our belief in the importance of people feeling comfortable saying "I don't know" and "I don't understand."&lt;/em&gt;&lt;/blockquote&gt;&lt;p&gt;The other side of the coin of not feigning surprise is being transparent about your own learning.&lt;/p&gt;&lt;p&gt;When I meet smart people I admire, I am usually eager to show them that &lt;strong&gt;I am like them&lt;/strong&gt;. So I look for opportunities to demonstrate that we share ideas and values. In a programming community, this could translate into finding a reason to bring up topics such as stacks or RMS. There is nothing inherently wrong with this. It is normal and healthy to establish common ground. It feels good.&lt;/p&gt;&lt;!-- Although I'm certain that this is not just a women's issue, I do expect that being female confers more assumptions that a person don't actually know much about math or computers. Whether or not it is true that people I meet make such assumptions, I often feel anxiety about it. --&gt;&lt;p&gt;The problem comes when you want to interact with someone as you continue to learn. If you can't comfortably say “I don't know what a stack is.”, then you deny yourself and your peers the opportunity to collaboratively change that. More importantly, your silence reinforces the idea that it is &lt;em&gt;not okay&lt;/em&gt; to not know or not understand. It is more subtle than feigning surprise, but not necessarily less powerful.&lt;/p&gt;&lt;p&gt;In the process of applying to Hacker School, I've looked at the blogs of some of the facilitators. In her blog, Allison Kaptur takes this concept of transparency a step further. For example, in &lt;a class="reference external" href="http://akaptur.github.io/blog/2013/11/15/introduction-to-the-python-interpreter/"&gt;a post in which she teaches about the Python interpreter&lt;/a&gt;, Allison writes (emphasis mine):&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;em&gt;There are four steps that python takes when you hit return: lexing, parsing, compiling, and interpreting. Lexing is breaking the line of code you just typed into tokens. The parser takes those tokens and generates a structure that shows their relationship to each other (in this case, an Abstract Syntax Tree). The compiler then takes the AST and turns it into one (or more) code objects. Finally, the interpreter takes each code object executes the code it represents.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;I’m not going to talk about lexing, parsing, or compiling at all today,&lt;/em&gt; &lt;strong&gt;mainly because I don’t know anything about these steps yet.&lt;/strong&gt; &lt;em&gt;Instead, we’ll suppose that all that went just fine, and we’ll have a proper python code object for the interpreter to interpret.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;To me, this feels like radical activism. Even if I don't get in to Hacker School, I want to learn this skill of portraying myself authentically, even if it exposes some vulnerability. Fundamentally, it's about separating self-worth from knowledge, and getting over Imposter Syndrome.&lt;/p&gt;&lt;p&gt;As a step in this direction, I am posting the fact that I have applied to Hacker School, even though I may not be admitted. If that happens, I will be very disappointed, and it will be embarrassing for that to be public, but I want to say that it's okay to fail at things, and it's okay to make mistakes.&lt;/p&gt;&lt;/div&gt;</description><guid>http://www.subsymbol.org/posts/201403transparent-learning.html</guid><pubDate>Mon, 17 Mar 2014 15:32:00 GMT</pubDate></item><item><title>The Year of the Em Dash</title><link>http://www.subsymbol.org/posts/201401the-year-of-em-dash.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;div class="document" id="the-year-of-the-em-dash"&gt;   &lt;p&gt;I admit it. The first thing I thought of when noticing what year was coming was—"em dash". The unicode character 2014 is the em dash, and as I am wont to type it in manually it is practically synonymous to me &lt;a class="footnote-reference" href="http://www.subsymbol.org/posts/201401the-year-of-em-dash.html#id2" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We symbolic creatures like to embue meaning into all things. While I am not superstitious, I enjoy the Rorschach test–like nature of divination. If I ask myself to make a connection between the changing of the year right now and the character em dash, it reflects my state—and nothing more—but this does not diminish its value.&lt;/p&gt;&lt;p&gt;In contrast with last year's character—the en dash—which is supposed to be used in place of 'to' in spans such as 2010–2016, or as a hyphen between open compounds, as in "computational linguistics–machine learning conference", the em dash is used informally in places of commas, colons, or semicolons for emphasis, interruption, or an abrupt change of thought. So I'm expecting a year of diversion, a relevant but indirect route, with an ultimate return to the path previously intended.&lt;/p&gt;&lt;p&gt;We have been stuck in a run of dash characters since 2010, the year of the hyphen, and won't escape until 2016, the year of the double vertical line (‖), which, I suppose, will entail some sort of parallelism.&lt;/p&gt;&lt;p&gt;Happy New Year!&lt;/p&gt;&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;&lt;tbody valign="top"&gt;&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.subsymbol.org/posts/201401the-year-of-em-dash.html#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Ctrl-shift-u 2014 will do it in many applications.  To enable this in emacs, put "(global-set-key (kbd "C-S-u") 'quoted-insert)" in your .emacs file.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><guid>http://www.subsymbol.org/posts/201401the-year-of-em-dash.html</guid><pubDate>Thu, 02 Jan 2014 01:35:00 GMT</pubDate></item><item><title>Brief notes from the Front Range NLP meeting</title><link>http://www.subsymbol.org/posts/201311brief-notes-from-front-range-nlp-meeting.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Last night I led &lt;a href="http://www.meetup.com/Front-Range-NLP-Natural-Language-Processing/events/146468962/"&gt;the discussion&lt;/a&gt; on Noah Smith's paper &lt;a href="http://arxiv.org/abs/1207.0245"&gt;Adversarial Evaluation for Models of Natural Language&lt;/a&gt;.  It was an interesting and animated discussion, and most of the valuable content was in the talking, but I'm posting my &lt;a href="http://www.cs.toronto.edu/~amber/adversarial_slides.html"&gt;slides&lt;/a&gt; for reference.  I also talked a bit about &lt;a href="https://github.com/lamber/malaprop"&gt;Malaprop&lt;/a&gt;, which builds an adversarial task along with a correction task.&lt;/p&gt;</description><guid>http://www.subsymbol.org/posts/201311brief-notes-from-front-range-nlp-meeting.html</guid><pubDate>Thu, 07 Nov 2013 15:13:00 GMT</pubDate></item><item><title>Malaprop v0.1.0</title><link>http://www.subsymbol.org/posts/201303malaprop-v010.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;blockquote&gt;"...she's as headstrong as an allegory on the banks of Nile." &lt;/blockquote&gt;&lt;p align="right"&gt;— Mrs. Malaprop, in Sheridan's &lt;u&gt;The Rivals&lt;/u&gt;   &lt;/p&gt; &lt;hr&gt;&lt;p&gt;As a contribution to the adversarial evaluation paradigm, I have released my first version of &lt;a href="https://github.com/lamber/malaprop"&gt;Malaprop&lt;/a&gt; &lt;a href="http://www.subsymbol.org/posts/201303malaprop-v010.html"&gt;⁰&lt;/a&gt;, a project involving transformations of natural text that result in some words being replaced by real-word near neighbours.  &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;The Adversarial Evaluation Model for Natural Language Processing&lt;/h3&gt;&lt;p&gt;Noah Smith recently proposed a &lt;a href="http://arxiv.org/abs/1207.0245"&gt;framework for evaluating linguistic models based on adversarial roles&lt;/a&gt; &lt;a href="http://www.subsymbol.org/posts/201303malaprop-v010.html"&gt;¹&lt;/a&gt;. In essence, if you have a sufficiently good linguistic model, you should be able to differentiate between a sample of natural language and an artificially altered sample. An entity that performs this differentiation is called a &lt;i&gt;Claude&lt;/i&gt;. At the same time, having a good linguistic model should also enable you to transform a sample of natural language in a way that preserves its linguistic properties; that is, that makes it hard for a Claude to tell which was the original. An entity that performs this transformation is called a &lt;i&gt;Zellig&lt;/i&gt;. These tasks are complementary. &lt;/p&gt;&lt;p&gt;This framework is reminiscent of the &lt;a href="http://en.wikipedia.org/wiki/Ciphertext_indistinguishability"&gt;cryptographic indistinguishability property&lt;/a&gt;, in which an attacker chooses two plaintexts to give to an Oracle. The Oracle chooses one and encrypts it. The encryption scheme is considered secure if the attacker can not guess at better than chance which of the two plaintexts corresponds to the Oracle's ciphertext. &lt;/p&gt;&lt;p&gt;Even though encryption schemes are constructed mathematically, questions of security are always empirical. The notion of Provable Security is regarded with skepticism (at least by some); schemes are considered tentatively secure based on withstanding attempts to be broken. Similarly, it would take an array of independent Claude's all unable to guess at better than chance to support the claim that a given Zellig had hit upon a truly linguistic-structure-preserving transformation. Likewise, if an array of independent Zelligs can't fool a given Claude, that would support a strong claim about his ability to recognize natural language. &lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;A Real-Word Error Corpus&lt;/h3&gt;&lt;p&gt;In this spirit, I've just released Malaprop v0.1.0.  It creates a corpus of real-word errors embedded in text. It was designed to work with &lt;a href="http://www.psych.ualberta.ca/~westburylab/downloads/westburylab.wikicorp.download.html"&gt;Westbury Lab's Wikipedia corpora&lt;/a&gt;, but can be used with any text. &lt;/p&gt;&lt;p&gt;The code acts as a noisy channel, randomly inserting &lt;a href="http://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance"&gt;Damerau-Levenshtein&lt;/a&gt; errors at the character level as a word is passed through. If the resulting string is a &lt;i&gt;real word&lt;/i&gt; — that is, a sufficiently frequent word in the original corpus — the new word replaces the original. &lt;/p&gt;&lt;p&gt;I intend to use this corpus to evaluate algorithms that correct orthographical errors. However, it could be used quite generally as just one Zellig in what I hope becomes a large body of such resources.   &lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;/p&gt;&lt;h3&gt;Notes &lt;/h3&gt;&lt;p&gt;&lt;a name="%E2%81%B0"&gt;⁰&lt;/a&gt;The term malapropism was first used in the context of the computational linguistics task of real-word error detection and correction by David St-Onge in 1995 in his Master's thesis, &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.55.596"&gt;Detecting and Correcting Malapropisms with Lexical Chains &lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;&lt;a name="%C2%B9"&gt;¹&lt;/a&gt;&lt;a href="http://arxiv.org/abs/1207.0245"&gt;Noah A. Smith. Adversarial Evaluation for Models of Natural Language. CoRR abs/1207.0245 2012 &lt;/a&gt;&lt;/p&gt;</description><category>computational linguistics</category><category>cryptography</category><category>evaluation</category><category>open access</category><category>open source</category><guid>http://www.subsymbol.org/posts/201303malaprop-v010.html</guid><pubDate>Thu, 07 Mar 2013 22:05:00 GMT</pubDate></item><item><title>Publishing a Paper without the Code is Not Enough</title><link>http://www.subsymbol.org/posts/201301publishing-paper-without-code-is-not.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;h3&gt;Shoulders to stand on&lt;/h3&gt;&lt;p&gt;Here are a couple of anecdotes demonstrating that without access to the implementation of an experiment, scientific progress is halted. &lt;/p&gt;&lt;ul&gt;&lt;li&gt;When I first began my master's degree, I made serious starts on a few ideas that eventually were blocked for lack of access of one kind or another. In one case I was unable to make progress because my idea involved building on the work of another who would not release his code to me. &lt;p&gt;(To give the benefit of the doubt, I now assume that the code was sloppy, missing pieces, or poorly documented, and he was simply embarrassed. Or perhaps there was some other valid reason. I don't know; he never gave one.) &lt;/p&gt;&lt;p&gt;Regardless of his motivation, this was a suboptimal outcome for him as well as for me, because his work could have been extended and improved at that time, but it was not. I had already spent a lot of time working out design details of my project, under the assumption that the code would be available. Nonetheless, I felt it would be too much work to replicate his entire thesis, and so I moved on to another topic. &lt;/p&gt;&lt;/li&gt;&lt;li&gt;A colleague in my cohort had a related experience in which she did replicate the work of a renowned scientist in the field, in order to attempt some improvements. In her case, the code she wrote, guided by interpreting the relevant paper, didn't do what the paper claimed. It is not clear whether this was because she was missing some vital methodology, or whether the claims were not justified. Neither is an acceptable result. &lt;/li&gt;&lt;/ul&gt;Having talked with other students, I know that these stories are not of isolated experiences. &lt;p&gt;Surely, you too have recently come across some fascinating scientific results that gave you an idea you wanted to implement right away, but to your dismay, you quickly realized that you would have to start from scratch. The algorithm was complex. Maybe the data was not available.   With disappointment, you realized that it would take you weeks or months of error-prone coding just to get to the baseline. Then you would not be confident that you implemented it in exactly the same way as the original, and there would be no direct comparison. So you wrote it down in your Someday/Maybe file and forgot about it. This happens to me constantly, and it just seems tragic and unnecessary.  &lt;/p&gt;&lt;h3&gt;My own dog food&lt;/h3&gt;&lt;p&gt;Later, I too did a replication study. In this case my advisor and a fellow student wanted to compare their work to known work on the same problem. However, neither the code nor the data was released (the data was proprietary), and the evaluations were not published in a form comparable to more modern evaluation. Luckily for us, the method worked beautifully, and now everyone can see that more clearly. &lt;/p&gt;&lt;p&gt;In an ironic turn, being a novice programmer at the time, my replication code was disorganized. Some of it was lost. It was not under version control until quite late and had few tests of correctness. I now had grounds to empathize with the colleague I earlier felt slighted by. However, I am in the fortunate position of having had to take a forced break before graduating, during which I learned basic software engineering skills, and had ample time to think about this issue. &lt;/p&gt;&lt;p&gt;I am now re-rewriting the entire code base such that the experiments can be completely replicated from scratch. Every step will be included in the code I release, including "trivial" command line glue. Although every module has tests, no code is invulnerable. Bugs may well turn up, and if they do, they will be there for analysis and repair by anyone who cares. Most importantly, if anyone wants to know exactly what I did, they will not have to scour the paper for hints. Similarly, all the data will be at their disposal for analysis, if mine lacks the answer to any particular unforeseeable analytical question.  &lt;/p&gt;&lt;h3&gt;This should be standard&lt;/h3&gt;&lt;p&gt;In 2013, there is no excuse for publishing a paper in applied computer science without releasing the code; a paper by itself is an unsubstantiated claim. Unlike in biology, or other physical fields, applied computer science results should be trivial to replicate by anyone with the right equipment. Moreover, not releasing the code gives your lab an unsportsmanlike advantage: you get to claim the results, perhaps state-of-the-art results, and you get to stay on the cutting edge, because no one else has time to catch up. &lt;/p&gt;&lt;p&gt;Many universities and labs now have projects under open licenses, but it is by no means a standard, and it is not a prerequisite for publication. We ought to change this.&lt;/p&gt;</description><category>open access</category><category>open source</category><category>science</category><guid>http://www.subsymbol.org/posts/201301publishing-paper-without-code-is-not.html</guid><pubDate>Fri, 18 Jan 2013 23:11:00 GMT</pubDate></item><item><title>Unit Test Fairies</title><link>http://www.subsymbol.org/posts/201212unit-test-fairies.html</link><dc:creator>L. Amber Wilcox-O'Hearn</dc:creator><description>&lt;p&gt;Sometimes unit tests take more than a few seconds to run, especially if they involve training a small test corpus in some way or other.  This can be dangerous for my focus.  "I'll just check my email while I'm waiting for this test to complete." are famous last words that can lead to a slow development cycle.  See &lt;a href="http://xkcd.com/303/"&gt;compiling&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;So, I started queuing a sound file to play after each test finished.  This way I would be alerted immediately, rather than relying on polling. &lt;/p&gt;&lt;p&gt;Recently &lt;a href="http://zooko.com"&gt;Zooko&lt;/a&gt; helped me improve this system by adding the feature of switching the file to play based on the test results. &lt;/p&gt;&lt;p&gt;Currently, I have the following alias in my .bash_aliases file: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;alias testbell='X=$? ;  if [ $X = 0 ] ; then mplayer -really-quiet -volume 50 ~/&lt;a href="https://github.com/edse/puzzle/blob/master/audio/51710__bristolstories__u-chimes3.mp3?raw=true"&gt;chimes3.mp3&lt;/a&gt; ; &lt;br&gt;else mplayer -really-quiet ~/&lt;a href="http://soundjax.com/reddo/51294%5EWINDGONG.mp3"&gt;gong.mp3&lt;/a&gt;  ; fi'&lt;br&gt;&lt;/code&gt;&lt;/pre&gt; The -really-quiet flag is about verbosity, not volume, and the -volume 50 is just because my chimes file is much louder than my gong file. &lt;br&gt;&lt;br&gt;&lt;p&gt;So today, for example, I've been running: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;time python -m unittest code.error_insertion.test.test_RealWordErrorChannel.RealWordErrorChannelTest ;&lt;br&gt; testbell&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;p&gt;A friend told me it sounds like there is a fairy somewhere intermittently trying to escape.&lt;/p&gt;</description><category>bash</category><category>productivity</category><guid>http://www.subsymbol.org/posts/201212unit-test-fairies.html</guid><pubDate>Tue, 11 Dec 2012 04:27:00 GMT</pubDate></item></channel></rss>